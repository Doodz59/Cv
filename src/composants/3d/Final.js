/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'

export function Model( {action}) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/final.glb')
  const { actions } = useAnimations(animations, group)

  const previousAction = usePrevious(action);

  useEffect(() => {
    if (previousAction) {
      actions[previousAction].stop();
    }
    actions[action].play();
  }, [action, actions]);
  return (
    <group ref={group} {...action} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="chaussure" geometry={nodes.chaussure.geometry} material={materials['Material.014']} skeleton={nodes.chaussure.skeleton} />
          <skinnedMesh name="chemise" geometry={nodes.chemise.geometry} material={materials['Material.009']} skeleton={nodes.chemise.skeleton} />
          <skinnedMesh name="Cylinder" geometry={nodes.Cylinder.geometry} material={materials['Material.004']} skeleton={nodes.Cylinder.skeleton} />
          <skinnedMesh name="Cylinder001" geometry={nodes.Cylinder001.geometry} material={materials['Material.005']} skeleton={nodes.Cylinder001.skeleton} />
          <skinnedMesh name="Cylinder003" geometry={nodes.Cylinder003.geometry} material={nodes.Cylinder003.material} skeleton={nodes.Cylinder003.skeleton} />
          <skinnedMesh name="Cylinder004" geometry={nodes.Cylinder004.geometry} material={nodes.Cylinder004.material} skeleton={nodes.Cylinder004.skeleton} />
          <skinnedMesh name="Cylinder006" geometry={nodes.Cylinder006.geometry} material={nodes.Cylinder006.material} skeleton={nodes.Cylinder006.skeleton} />
          <skinnedMesh name="Cylinder007" geometry={nodes.Cylinder007.geometry} material={nodes.Cylinder007.material} skeleton={nodes.Cylinder007.skeleton} />
          <skinnedMesh name="Cylinder008" geometry={nodes.Cylinder008.geometry} material={nodes.Cylinder008.material} skeleton={nodes.Cylinder008.skeleton} />
          <skinnedMesh name="Cylinder009" geometry={nodes.Cylinder009.geometry} material={nodes.Cylinder009.material} skeleton={nodes.Cylinder009.skeleton} />
          <skinnedMesh name="eye" geometry={nodes.eye.geometry} material={nodes.eye.material} skeleton={nodes.eye.skeleton} />
          <skinnedMesh name="eye2" geometry={nodes.eye2.geometry} material={nodes.eye2.material} skeleton={nodes.eye2.skeleton} />
          <skinnedMesh name="pupille001" geometry={nodes.pupille001.geometry} material={materials['Material.002']} skeleton={nodes.pupille001.skeleton} />
          <skinnedMesh name="pupille002" geometry={nodes.pupille002.geometry} material={materials['Material.003']} skeleton={nodes.pupille002.skeleton} />
          <skinnedMesh name="Retopology" geometry={nodes.Retopology.geometry} material={materials.hair} skeleton={nodes.Retopology.skeleton} />
          <skinnedMesh name="Retopology002" geometry={nodes.Retopology002.geometry} material={materials['Material.010']} skeleton={nodes.Retopology002.skeleton} />
          <skinnedMesh name="Retopology003" geometry={nodes.Retopology003.geometry} material={materials['pants.001']} skeleton={nodes.Retopology003.skeleton} />
          <skinnedMesh name="Sphere" geometry={nodes.Sphere.geometry} material={materials.dark_bouton} skeleton={nodes.Sphere.skeleton} />
          <skinnedMesh name="Sphere001" geometry={nodes.Sphere001.geometry} material={nodes.Sphere001.material} skeleton={nodes.Sphere001.skeleton} />
          <skinnedMesh name="Sphere002" geometry={nodes.Sphere002.geometry} material={materials['Material.011']} skeleton={nodes.Sphere002.skeleton} />
          <skinnedMesh name="Sphere003" geometry={nodes.Sphere003.geometry} material={nodes.Sphere003.material} skeleton={nodes.Sphere003.skeleton} />
          <skinnedMesh name="Sphere004" geometry={nodes.Sphere004.geometry} material={nodes.Sphere004.material} skeleton={nodes.Sphere004.skeleton} />
          <skinnedMesh name="Sphere005" geometry={nodes.Sphere005.geometry} material={nodes.Sphere005.material} skeleton={nodes.Sphere005.skeleton} />
          <skinnedMesh name="Sphere006" geometry={nodes.Sphere006.geometry} material={materials['Material.013']} skeleton={nodes.Sphere006.skeleton} />
          <skinnedMesh name="Sphere007" geometry={nodes.Sphere007.geometry} material={materials['Material.012']} skeleton={nodes.Sphere007.skeleton} />
          <skinnedMesh name="Sphere008" geometry={nodes.Sphere008.geometry} material={nodes.Sphere008.material} skeleton={nodes.Sphere008.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/final.glb')
function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  const ref = useRef();
  // Store current value in ref
  useEffect(() => {
    ref.current = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)
  return ref.current;
}